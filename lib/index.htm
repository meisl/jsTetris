<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML>
<HEAD>
  <TITLE> jsTetris </TITLE>
  <META name="Generator" content="EditPlus">
  <META name="Author" content="meisl">

    <SCRIPT type="text/javascript">
    <!--
        function bmTranspose(bitmap) {
            var result = [],
                h = bitmap.length,
                w = bitmap[0].length,
                newH = w,
                newW = h;
            for (var y = 0; y < newH; y++) {
                var row = [];
                for (var x = 0; x < newW; x++) {
                    row[x] = bitmap[x][y];
                }
                result[y] = row;
            }

            return result;
        }
        
        function bmRotate(bitmap) {
            var result = [],
                h = bitmap.length,
                w = bitmap[0].length,
                newH = w,
                newW = h;
            for (var y = 0; y < newH; y++) {
                var row = [];
                for (var x = 0; x < newW; x++) {
                    row[x] = bitmap[h - x - 1][y];
                }
                result[y] = row;
            }

            return result;
        }
        
        function bmMirror(bitmap) {
            return bmRotate(bmTranspose(bitmap));
        }

        function bmEquals(bmA, bmB) {
            var x, y,
                rowA, rowB
            if (bmA.length !== bmB.length) {
                return false;
            }
            for (y = 0; y < bmA.length; y++) {
                rowA = bmA[y];
                rowB = bmB[y];
                if (rowA.length !== rowB.length) {
                    return false;
                }
                for (x = 0; x < rowA.length; x++) {
                    if (rowA[x] !== rowB[x]) {
                        return false;
                    }
                }
            }
            return true;
        }

        function Piece(color, bitmap) {
            this.color = color;
            Piece[Piece.len++] = this;
            var i = 0,
                bm = bitmap;
            do {
                this[i] = {
                    color: color,
                    rows: bm,
                    rotA: null,
                    rotB: null,
                };
                bm = bmRotate(bm);
                if (i > 0) {
                    this[i].rotA = this[i - 1];
                    this[i - 1].rotC = this[i];
                }
                i++;
            } while (!bmEquals(bm, bitmap));
            this[0].rotA = this[i - 1];
            this[i - 1].rotC = this[0];
            this.length = i;
        }

        Piece.prototype = {
        };
        Piece.len = 0;
        Piece.J = new Piece("blue", [
            [0, 1],
            [0, 1],
            [1, 1]
        ]);
        Piece.L = new Piece("orange", bmMirror(Piece.J[0].rows));
        Piece.Z = new Piece("red", [
            [1, 1, 0],
            [0, 1, 1]
        ]);
        Piece.S = new Piece("green", bmMirror(Piece.Z[0].rows));
        Piece.T = new Piece("purple", [
            [1, 1, 1],
            [0, 1, 0]
        ]);
        Piece.O = new Piece("yellow", [
            [1, 1],
            [1, 1]
        ]);
        Piece.I = new Piece("cyan", [
            [1, 1, 1, 1]
        ]);

        function Field(w, h) {
            var cW = 20,
                cH = 20,
                bW = 1,
                fDiv = document.createElement("div"),
                cells = [];
            this.w = w;
            this.h = h;
            this.cW = cW;
            this.cH = cH;
            this.emptyColor   = "#222222";
            this.cells        = cells;
            this.div          = fDiv;
            this.currentPiece = null;
            this.currentX     = null;
            this.currentY     = null;
            for (var y = 0; y < h; y++) {
                row = [];
                for (var x = 0; x < w; x++) {
                    var cDiv = document.createElement("div");
                    cDiv.style.width  = cW + "px";
                    cDiv.style.height = cH + "px";
                    cDiv.style.backgroundColor = this.emptyColor;
                    cDiv.style.top  = (bW + y * (cH + bW)) + "px";
                    cDiv.style.left = (bW + x * (cW + bW)) + "px";
                    cDiv.style.position = "absolute";
                    row[x] = {
                        div: cDiv,
                        x: x,
                        y: y,
                        piece: null
                    };
                    fDiv.appendChild(cDiv);
                }
                cells[h - 1 - y] = row;
            }
            fDiv.style.width  = (bW + w * (cW + bW)) + "px";
            fDiv.style.height = (bW + h * (cH + bW)) + "px";
            fDiv.style.position = "absolute";
            fDiv.style.backgroundColor = "#333333"; //TODO: a bit darker than this.emptyColor
            
            this.delay = 750;
            this.currentPiece = null;
            this.completed = [];
        }
        Field.prototype = {
            show: function (x, y) {
                this.x = x || this.x || 200;
                this.y = y || this.y ||  20;
                this.div.style.left = this.x + "px";
                this.div.style.top  = this.y + "px";
                document.body.appendChild(this.div);
            },
            isValid: function (x, y) {
                return x >= 0 && x < this.w && y >= 0 && y < this.h;
            },
            assertValid: function (x, y) {
                if (!this.isValid(x, y)) {
                    throw new Error("set(): illegal coordinates (" + x + ", " + y + ")");
                }
            },
            isFree: function (x, y) {
                this.assertValid(x, y);
                return this.cells[y][x].piece === null;
            },
            set: function (x, y, piece) {
                this.assertValid(x, y);
                var row  = this.cells[y],
                    cell = row[x];
                cell.piece = piece;
                cell.div.style.backgroundColor = (piece === null) ? this.emptyColor : piece.color;
            },
            clear: function () {
                var self = this;
                self.forEachCell(function (c, x, y) {
                    self.set(x, y, null);
                });
            },
            forEachCell: function (f) {
                for (var y = 0; y < this.h; y++) {
                    for (var x = 0; x < this.w; x++) {
                        f(this.cells[y][x], x, y);
                    }
                }
            },
            tryPiece: function (piece, x, y, f) {
                var pW = piece.rows.length;
                for (var pY = 0; pY < pW; pY++) {
                    var row = piece.rows[pW - 1 - pY];
                    for (var pX = 0; pX < row.length; pX++) {
                        f.call(this, x + pX, y + pY, row[pX], pX, pY);
                    }
                }
            },
            setPiece: function (piece, x, y, color) {
                this.tryPiece(piece, x, y, function (tX, tY, p, pX, pY) {
                    if (p) {
                        this.set(tX, tY, color);
                    }
                });
            },
            put: function (piece, x, y) {
                var result = true;
                this.tryPiece(piece, x, y, function (tX, tY, p, pX, pY) {
                    if (p) {
                        if (!this.isValid(tX, tY) || !this.isFree(tX, tY)) {
                            result = false;
                        }
                    }
                });
                if (result) {
                    this.setPiece(piece, x, y, piece);
                }
                return result;
            },
            remove: function (piece, x, y) {
                this.setPiece(piece, x, y, null);
            },
            inject: function (piece) {
                var x = Math.floor((this.w - piece.rows[0].length) / 2),
                    y = this.h - 4;
                if (this.put(piece, x, y)) {
                    this.currentPiece = piece;
                    this.currentX = x;
                    this.currentY = y;
                    return true;
                }
                return false;
            },
            moveCurrent: function (dx, dy) {
                this.remove(this.currentPiece, this.currentX, this.currentY);
                if (this.put(this.currentPiece, this.currentX + dx, this.currentY + dy)) {
                    this.currentX += dx;
                    this.currentY += dy;
                    return true;
                } else {
                    this.put(this.currentPiece, this.currentX, this.currentY);
                    return false;
                }
            },
            rotateCurrent: function (d) {
                var rotated = (d > 0) ? this.currentPiece.rotA : this.currentPiece.rotC;
                this.remove(this.currentPiece, this.currentX, this.currentY);
                if (this.put(rotated, this.currentX, this.currentY)) {
                    this.currentPiece = rotated;
                    return true;
                } else {
                    this.put(this.currentPiece, this.currentX, this.currentY);
                    return false;
                }
            },
            randomPiece: function () {
                var kind  = Piece[Math.floor(Math.random() * Piece.len)],
                    piece = kind[Math.floor(Math.random() * kind.length)];
                return piece;
            },
            injectRandom: function () {
                var piece = this.randomPiece();
                return this.inject(piece);
            },
            dropCurrent: function () {
                log("dropCurrent({ current: " + this.currentPiece + "})");
                if (!this.dropping) {
                    this.stopTicking();  // delete pending tick
                    this.dropping = true;
                    this.startTicking(); // reinstall next tick (will occur sooner)
                }
            },
            clearRow: function (y) {
                this.assertValid(0, y);
                for (var x = 0; x < this.w; x++) {
                    this.set(x, y, null);
                }
            },
            burnRows: function (ys, then) {
                var self = this;
                self.flashRows(ys, function () {
                    for (var i = 0; i < ys.length; i++) {
                        self.clearRow(ys[i]);
                    }
                    then();
                });
            },
            checkCompleted: function () {
                var y    = this.currentY,
                    maxY = y + this.currentPiece.rows.length;
                while (y < maxY) {
                    if (this.isRowComplete(y)) {
                        this.completed.push(y);
                    }
                    y++;
                }
                return this.completed.length > 0;
            },
            dropFirstCompleted: function () {
                var x, y, i;
                if (this.completed.length) {
                    for (y = this.completed.shift(); y < this.h - 1; y++) {
                        for (x = 0; x < this.w; x++) {
                            this.set(x, y, this.cells[y + 1][x].piece);
                        }
                    }
                    // "shift in" an empty row at the top
                    this.clearRow(this.h - 1);
                    // update remaining completed rows
                    for (i = 0; i < this.completed.length; i++) {
                        this.completed[i]--;
                    }
                    return true;
                }
                return false;
            },
            startTicking: function () {
                if (this.ticking) {
                    return;
                }
                var self = this,
                    gameOver = false,
                    down = function () {
                        return self.moveCurrent(0, -1);
                    },
                    onTick = function () {
                        var x, y, maxY, i;
                        log("tick({ currentPiece: " + (self.currentPiece ? self.currentX + "/" + self.currentY : "-") + ", dropping: " + self.dropping + ", completed: [" + self.completed.join(", ") + "] })");
                        if (self.dropFirstCompleted()) {
                            if (!self.currentPiece) {
                                self.inject(Piece.I[1]);    //Random();
                            } else {
                                self.currentY--;
                            }
                        } else if (self.currentPiece) {
                            if (down()) {
                                
                            } else {
                                if (self.dropping) {
                                    self.dropping = false;
                                } else {
                                    if (self.checkCompleted()) {
                                        self.currentPiece = null;
                                        self.burnRows(self.completed, onTick);
                                        return;
                                    } else {
                                        gameOver = !self.injectRandom();
                                    }
                                }
                            }
                        } else { // no currentPiece
                            gameOver = !self.injectRandom();
                        }
                        if (!gameOver) {
                            self.ticking = window.setTimeout(onTick, self.dropping ? 5 : self.delay);
                        } else {
                            log("Game over!");
                        }
                    };
                onTick();
            },
            stopTicking: function () {
                if (this.ticking) {
                    window.clearTimeout(this.ticking);
                    this.ticking = null;
                }
            },
            isRowComplete: function (y) {
                for (var x = 0; x < this.w; x++) {
                    if (this.isFree(x, y)) {
                        return false;
                    }
                }
                return true;
            },
            flashRows: function (ys, then) {
                log("flashRows([" + ys.join(", ") + "])");
                var self  = this,
                    delay = 10,
                    k     = 6,
                    flash = function () {
                        for (var i = 0; i < ys.length; i++) {
                            var y   = ys[i],
                                row = self.cells[y];
                            if ((k % 2) === 0) {
                                for (var x = 0; x < self.w; x++) {
                                    row[x].div.style.backgroundColor = "white";
                                }
                            } else {
                                for (var x = 0; x < self.w; x++) {
                                    self.set(x, y, row[x].piece);
                                }
                            }
                        }
                        if (k--) {
                            window.setTimeout(flash, delay);
                        } else {
                            then();
                        }
                    };
                flash();
            },
        };


        var w = 10,
            h = 20;
        var mainField = new Field(w, h);
            mainField.x = 400;

        var pcField = new Field(20, Piece.len * 5);
        pcField.x = mainField.x + mainField.w * mainField.cW + 50;
        for (var i = 0; i < Piece.len; i++) {
            var p = Piece[i];
            for (var k = 0; k < p.length; k++) {
                pcField.put(p[k], k * 5, i * 5);
            }
        }


        keys = {
             86:   function () { mainField.rotateCurrent(-1); return "ROT-C"; },   // v
             87:   function () { return "W"; },   // w
             65:   function () { return "A"; },   // a
             68:   function () { return "D"; },   // d
            104:   function () { mainField.moveCurrent( 0, +1); return "Num-8(UP)";     },   // NUM-8
             98:   function () { mainField.moveCurrent( 0, -1); return "Num-2(DOWN)";   },   // NUM-2
            100:   function () { mainField.moveCurrent(-1,  0); return "Num-4(LEFT)";   },   // NUM-4
            102:   function () { mainField.moveCurrent(+1,  0); return "Num-6(RIGHT)";  },   // NUM-6
             88:   function () {    return "ROT-A"; },  // x
             32:   function () { mainField.dropCurrent();       return "DROP"; },           // SPACE
             38:   function () { mainField.rotateCurrent(+1);   return "UP(ROT-A)";    },   // UP
             40:   function () { mainField.rotateCurrent(-1);   return "DOWN(ROT-C)";  },   // DOWN
             37:   function () { mainField.moveCurrent(-1,  0); return "LEFT";  },          // LEFT
             39:   function () { mainField.moveCurrent(+1,  0); return "RIGHT"; },          // RIGHT
             
             90:   function () { mainField.inject(Piece.Z[0]); return "Z"; },   // Z
             83:   function () { mainField.inject(Piece.S[0]); return "S"; },   // S
             84:   function () { mainField.inject(Piece.T[0]); return "T"; },   // T
             73:   function () { mainField.inject(Piece.I[0]); return "I"; },   // I
             74:   function () { mainField.inject(Piece.J[0]); return "J"; },   // J
             76:   function () { mainField.inject(Piece.L[0]); return "L"; },   // L
             79:   function () { mainField.inject(Piece.O[0]); return "O"; },   // O
             
             80:   function () { return "P"; },         // P
             19:   function () { return "PAUSE"; },     // PAUSE
             27:   function () {        // ESC
                        mainField.stopTicking();
                        mainField.clear();
                        mainField.currentPiece = null;
                        mainField.delay = 750;
                        mainField.startTicking();
                        return "ESC"; 
                    },
        };

        document.onkeydown = function (evt) {
            var evt = evt || window.event,
                nChr = evt.charCode || evt.keyCode,
                what = "";
            if (keys[nChr]) {
                what = keys[nChr]();
            }
            log(nChr + ": " + what);
            return false;
        };

        function log(msg) {
            document.body.appendChild(document.createTextNode(msg));
            document.body.appendChild(document.createElement("br"));
        }

        mainField.put(Piece.O[0], 0, 0);
        mainField.put(Piece.O[0], 2, 0);
        mainField.put(Piece.O[0], 4, 0);
        mainField.put(Piece.T[2], 6, 0);
        mainField.put(Piece.I[0], 0, 2);
        mainField.put(Piece.I[0], 4, 2);

        window.onload = function () {
            mainField.show();
            pcField.show();
            mainField.startTicking();
        };


    //-->
    </SCRIPT>
</HEAD>

 <BODY>
 </BODY>
</HTML>
